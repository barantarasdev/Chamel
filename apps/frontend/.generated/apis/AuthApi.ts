/* tslint:disable */
/* eslint-disable */
/**
 * Chamel
 * The Chamel API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SignInDTO,
  SignUpDTO,
  TokenC,
} from '../models/index';
import {
    SignInDTOFromJSON,
    SignInDTOToJSON,
    SignUpDTOFromJSON,
    SignUpDTOToJSON,
    TokenCFromJSON,
    TokenCToJSON,
} from '../models/index';

export interface AuthControllerSignInRequest {
    signInDTO: SignInDTO;
}

export interface AuthControllerSignUpRequest {
    signUpDTO: SignUpDTO;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * refreshToken
     */
    async authControllerRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenC>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCFromJSON(jsonValue));
    }

    /**
     * refreshToken
     */
    async authControllerRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenC> {
        const response = await this.authControllerRefreshRaw(initOverrides);
        return await response.value();
    }

    /**
     * signIn
     */
    async authControllerSignInRaw(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenC>> {
        if (requestParameters['signInDTO'] == null) {
            throw new runtime.RequiredError(
                'signInDTO',
                'Required parameter "signInDTO" was null or undefined when calling authControllerSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signIn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInDTOToJSON(requestParameters['signInDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCFromJSON(jsonValue));
    }

    /**
     * signIn
     */
    async authControllerSignIn(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenC> {
        const response = await this.authControllerSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * signOut
     */
    async authControllerSignOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/signOut`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * signOut
     */
    async authControllerSignOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerSignOutRaw(initOverrides);
    }

    /**
     * signUp
     */
    async authControllerSignUpRaw(requestParameters: AuthControllerSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenC>> {
        if (requestParameters['signUpDTO'] == null) {
            throw new runtime.RequiredError(
                'signUpDTO',
                'Required parameter "signUpDTO" was null or undefined when calling authControllerSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signUp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpDTOToJSON(requestParameters['signUpDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCFromJSON(jsonValue));
    }

    /**
     * signUp
     */
    async authControllerSignUp(requestParameters: AuthControllerSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenC> {
        const response = await this.authControllerSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
