/* tslint:disable */
/* eslint-disable */
/**
 * Chamel
 * The Chamel API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDTO,
  UpdateUserDTO,
  UserC,
} from '../models/index';
import {
    CreateUserDTOFromJSON,
    CreateUserDTOToJSON,
    UpdateUserDTOFromJSON,
    UpdateUserDTOToJSON,
    UserCFromJSON,
    UserCToJSON,
} from '../models/index';

export interface UserControllerCreateUserRequest {
    createUserDTO: CreateUserDTO;
}

export interface UserControllerDeleteUserRequest {
    userId: string;
}

export interface UserControllerGetUserRequest {
    userId: string;
}

export interface UserControllerUpdateUserRequest {
    userId: string;
    updateUserDTO: UpdateUserDTO;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Create user
     */
    async userControllerCreateUserRaw(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserC>> {
        if (requestParameters['createUserDTO'] == null) {
            throw new runtime.RequiredError(
                'createUserDTO',
                'Required parameter "createUserDTO" was null or undefined when calling userControllerCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDTOToJSON(requestParameters['createUserDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCFromJSON(jsonValue));
    }

    /**
     * Create user
     */
    async userControllerCreateUser(requestParameters: UserControllerCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserC> {
        const response = await this.userControllerCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove user
     */
    async userControllerDeleteUserRaw(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserC>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userControllerDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCFromJSON(jsonValue));
    }

    /**
     * Remove user
     */
    async userControllerDeleteUser(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserC> {
        const response = await this.userControllerDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user
     */
    async userControllerGetUserRaw(requestParameters: UserControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserC>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userControllerGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCFromJSON(jsonValue));
    }

    /**
     * Get user
     */
    async userControllerGetUser(requestParameters: UserControllerGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserC> {
        const response = await this.userControllerGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update user
     */
    async userControllerUpdateUserRaw(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserC>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        if (requestParameters['updateUserDTO'] == null) {
            throw new runtime.RequiredError(
                'updateUserDTO',
                'Required parameter "updateUserDTO" was null or undefined when calling userControllerUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDTOToJSON(requestParameters['updateUserDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCFromJSON(jsonValue));
    }

    /**
     * Update user
     */
    async userControllerUpdateUser(requestParameters: UserControllerUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserC> {
        const response = await this.userControllerUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
